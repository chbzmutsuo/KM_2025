// SBM - 仕出し弁当管理システム Prisma Schema

model SbmCustomer {
  id              Int     @id @default(autoincrement())
  companyName     String  @db.VarChar(200)
  contactName     String? @db.VarChar(100)
  // phoneNumber     String? @db.VarChar(20) // ユニーク制約を削除、メイン電話番号として残す
  postalCode      String? @db.VarChar(10)
  prefecture      String? @db.VarChar(50) // 都道府県
  city            String? @db.VarChar(100) // 市区町村
  street          String? @db.VarChar(200) // 町名番地
  building        String? @db.VarChar(100) // その他（建物名等）
  email           String? @db.VarChar(255)
  availablePoints Int     @default(0)
  notes           String? @db.Text

  // タイムスタンプ
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // リレーション
  SbmReservation   SbmReservation[]
  SbmCustomerPhone SbmCustomerPhone[]
}

// 顧客電話番号管理
model SbmCustomerPhone {
  id            Int    @id @default(autoincrement())
  sbmCustomerId Int
  label         String @db.VarChar(50) // '自宅', '携帯', '職場', 'FAX', 'その他'
  phoneNumber   String @db.VarChar(20)

  // タイムスタンプ
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // リレーション
  SbmCustomer SbmCustomer @relation(fields: [sbmCustomerId], references: [id], onDelete: Cascade)

  @@unique([sbmCustomerId, phoneNumber]) // 同じ顧客で同じ電話番号は重複不可
}

model SbmProduct {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(200)
  description String? @db.Text

  category String  @db.VarChar(100)
  isActive Boolean @default(true)

  // タイムスタンプ
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // リレーション
  SbmProductPriceHistory SbmProductPriceHistory[]
  SbmReservationItem     SbmReservationItem[]
}

model SbmProductPriceHistory {
  id Int @id @default(autoincrement())

  price         Int // 価格（円）
  cost          Int // 原価（円）
  effectiveDate DateTime

  // タイムスタンプ
  createdAt DateTime @default(now())

  // リレーション
  SbmProduct   SbmProduct @relation(fields: [sbmProductId], references: [id], onDelete: Cascade)
  sbmProductId Int
}

// 配達グループ
model SbmDeliveryGroup {
  id                    Int                           @id @default(autoincrement())
  name                  String
  deliveryDate          DateTime
  userId                Int
  userName              String
  status                String                        @default("planning") // planning, route_generated, in_progress, completed
  totalReservations     Int                           @default(0)
  completedReservations Int                           @default(0)
  estimatedDuration     Int?
  actualDuration        Int?
  routeUrl              String?
  notes                 String?
  createdAt             DateTime                      @default(now())
  updatedAt             DateTime                      @updatedAt
  optimizedRoute        SbmDeliveryRouteStop[]
  groupReservations     SbmDeliveryGroupReservation[]

  @@map("sbm_delivery_groups")
}

// 配達ルートの停止地点
model SbmDeliveryRouteStop {
  id                 String           @id @default(uuid())
  sbmDeliveryGroupId Int
  sbmReservationId   Int
  customerName       String
  address            String
  lat                Float?
  lng                Float?
  estimatedArrival   DateTime?
  actualArrival      DateTime?
  deliveryOrder      Int
  deliveryCompleted  Boolean          @default(false)
  recoveryCompleted  Boolean          @default(false)
  estimatedDuration  Int
  notes              String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  SbmDeliveryGroup   SbmDeliveryGroup @relation(fields: [sbmDeliveryGroupId], references: [id], onDelete: Cascade)
  SbmReservation     SbmReservation   @relation(fields: [sbmReservationId], references: [id], onDelete: Cascade)

  @@map("sbm_delivery_route_stops")
}

// 配達グループと予約の紐付け
model SbmDeliveryGroupReservation {
  id                 Int              @id @default(autoincrement())
  sbmDeliveryGroupId Int
  sbmReservationId   Int
  deliveryOrder      Int?
  isCompleted        Boolean          @default(false)
  completedAt        DateTime?
  notes              String?
  createdAt          DateTime         @default(now())
  SbmDeliveryGroup   SbmDeliveryGroup @relation(fields: [sbmDeliveryGroupId], references: [id], onDelete: Cascade)
  SbmReservation     SbmReservation   @relation(fields: [sbmReservationId], references: [id], onDelete: Cascade)

  @@unique([sbmDeliveryGroupId, sbmReservationId])
  @@map("sbm_delivery_group_reservations")
}

model SbmReservation {
  // 配達関連
  deliveryRouteStops          SbmDeliveryRouteStop[]
  SbmDeliveryGroupReservation SbmDeliveryGroupReservation[]
  id                          Int                           @id @default(autoincrement())
  sbmCustomerId               Int
  customerName                String                        @db.VarChar(200)
  contactName                 String?                       @db.VarChar(100)
  phoneNumber                 String                        @db.VarChar(20)

  // 配達先住所（5区分）
  postalCode String? @db.VarChar(10)
  prefecture String? @db.VarChar(50) // 都道府県
  city       String? @db.VarChar(100) // 市区町村
  street     String? @db.VarChar(200) // 町名番地
  building   String? @db.VarChar(100) // その他（建物名等）

  // 配達情報
  deliveryDate   DateTime
  pickupLocation String   @db.VarChar(50) // '配達', '店舗受取'

  // 注文情報
  purpose       String @db.VarChar(100) // '会議', '研修', '接待', 'イベント', '懇親会', 'その他'
  paymentMethod String @db.VarChar(50) // '現金', '銀行振込', '請求書', 'クレジットカード'
  orderChannel  String @db.VarChar(50) // '電話', 'FAX', 'メール', 'Web', '営業', 'その他'

  // 金額情報
  totalAmount Int // 合計金額（円）
  pointsUsed  Int @default(0)
  finalAmount Int // 最終金額（円）

  // 管理情報
  orderStaff String  @db.VarChar(100)
  userId     Int?
  notes      String? @db.Text

  // タスク管理
  deliveryCompleted Boolean @default(false)
  recoveryCompleted Boolean @default(false)

  // タイムスタンプ
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // リレーション
  SbmCustomer                 SbmCustomer                   @relation(fields: [sbmCustomerId], references: [id], onDelete: Restrict)
  User                        User?                         @relation(fields: [userId], references: [id], onDelete: SetNull)
  SbmReservationItem          SbmReservationItem[]
  SbmReservationTask          SbmReservationTask[]
  SbmReservationChangeHistory SbmReservationChangeHistory[]
  SbmDeliveryAssignment       SbmDeliveryAssignment[]
}

model SbmReservationItem {
  id               String @id @default(cuid())
  sbmReservationId Int
  sbmProductId     Int
  productName      String @db.VarChar(200)
  quantity         Int
  unitPrice        Int // 単価（円）
  totalPrice       Int // 小計（円）

  // タイムスタンプ
  createdAt DateTime @default(now())

  // リレーション
  SbmReservation SbmReservation @relation(fields: [sbmReservationId], references: [id], onDelete: Cascade)
  SbmProduct     SbmProduct     @relation(fields: [sbmProductId], references: [id], onDelete: Restrict)
}

model SbmReservationTask {
  id               Int       @id @default(autoincrement())
  sbmReservationId Int
  taskType         String    @db.VarChar(50) // 'delivery', 'recovery'
  isCompleted      Boolean   @default(false)
  completedAt      DateTime?
  notes            String?   @db.Text

  // タイムスタンプ
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // リレーション
  SbmReservation SbmReservation @relation(fields: [sbmReservationId], references: [id], onDelete: Cascade)
}

model SbmReservationChangeHistory {
  id               String @id @default(cuid())
  sbmReservationId Int
  changedBy        String @db.VarChar(100)
  changeType       String @db.VarChar(50) // 'create', 'update', 'delete'
  changedFields    Json? // 変更されたフィールドの詳細
  oldValues        Json? // 変更前の値
  newValues        Json? // 変更後の値

  // タイムスタンプ
  changedAt DateTime @default(now())

  // リレーション
  SbmReservation SbmReservation? @relation(fields: [sbmReservationId], references: [id], onDelete: SetNull)
}

model SbmDeliveryTeam {
  id   Int      @id @default(autoincrement())
  name String   @db.VarChar(100)
  date DateTime

  // タイムスタンプ
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // リレーション
  SbmDeliveryAssignment SbmDeliveryAssignment[]
}

model SbmDeliveryAssignment {
  id                Int      @id @default(autoincrement())
  sbmDeliveryTeamId Int
  sbmReservationId  Int
  assignedBy        String   @db.VarChar(100)
  userId            Int?
  deliveryDate      DateTime
  estimatedDuration Int? // 予想配達時間（分）
  actualDuration    Int? // 実際の配達時間（分）
  route             Json? // 配達ルート情報
  status            String   @default("assigned") @db.VarChar(50) // 'assigned', 'in_progress', 'completed', 'cancelled'

  // タイムスタンプ
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // リレーション
  SbmDeliveryTeam SbmDeliveryTeam @relation(fields: [sbmDeliveryTeamId], references: [id], onDelete: Restrict)
  SbmReservation  SbmReservation  @relation(fields: [sbmReservationId], references: [id], onDelete: Cascade)
  User            User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
}
