datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder", "typedSql"]
}

model User {
  id            Int       @id @default(autoincrement())
  code          Int?      @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @default(now()) @updatedAt()
  sortOrder     Float     @default(0)
  active        Boolean   @default(true)
  hiredAt       DateTime?
  yukyuCategory String?   @default("A")

  name                 String
  kana                 String?
  email                String?   @unique
  password             String?
  type                 String?
  role                 String    @default("user")
  tempResetCode        String?
  tempResetCodeExpired DateTime?
  storeId              Int?
  schoolId             Int?
  rentaStoreId         Int?
  type2                String?
  shopId               Int?
  membershipName       String?
  damageNameMasterId   Int?
  color                String?
  tell                 String?
  app                  String?
  apps                 String[]

  School School? @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  VideoFromUser           VideoFromUser[]
  Comment                 Comment[]
  LessonLog               LessonLog[]
  LessonLogAuthorizedUser LessonLogAuthorizedUser[]

  Payment        Payment[]
  SystemChat     SystemChat[]    @relation("user")
  SystemChatRoom SystemChatRoom?
  Ticket         Ticket[]

  GenbaDayShift GenbaDayShift[]
  SohkenCar     SohkenCar[]

  bcc String?

  masterKeyClientId      Int?
  MasterKeyClientGroup   MasterKeyClientGroup? @relation(fields: [masterKeyClientGroupId], references: [id])
  masterKeyClientGroupId Int?

  YsWorkRecord YsWorkRecord[]
  UserRole     UserRole[]
  AppLog       AppLog[]

  ApSender       ApSender[]
  ApReceiver     ApReceiver[]
  MidTsNippoUser MidTsNippoUser[]

  AqSaleCart AqSaleCart[]

  PaidLeaveGrant PaidLeaveGrant[]

  AqCustomerRecord                 AqCustomerRecord[]
  UserWorkTimeHistoryMidTable      UserWorkTimeHistoryMidTable[]
  UserPayedLeaveTypeMidTable       UserPayedLeaveTypeMidTable[]
  AqSaleRecord                     AqSaleRecord[]
  TsConstructionSubConUserMidTable TsConstructionSubConUserMidTable[]
  // TbmOperation                     TbmOperation[]
  // TbmOperationGroup                TbmOperationGroup[]
  AqCustomer                       AqCustomer[]
  TbmBase                          TbmBase?                           @relation(fields: [tbmBaseId], references: [id])
  tbmBaseId                        Int?
  TbmDriveSchedule                 TbmDriveSchedule[]
  UserWorkStatus                   UserWorkStatus[]
  OdometerInput                    OdometerInput[]
  TbmRefuelHistory                 TbmRefuelHistory[]
}

model ReleaseNotes {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now()) @updatedAt()
  sortOrder Float     @default(0)

  rootPath         String
  title            String?
  msg              String
  imgUrl           String?
  confirmedUserIds Int[]
}

model GoogleAccessToken {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now()) @updatedAt()
  sortOrder Float     @default(0)

  email         String  @unique
  access_token  String
  refresh_token String
  scope         String
  token_type    String
  id_token      String
  expiry_date   BigInt
  tokenJSON     String?
}

model RoleMaster {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  sortOrder Float     @default(0)

  name        String
  description String?
  color       String?
  apps        String[]
  UserRole    UserRole[]
}

model UserRole {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  sortOrder Float     @default(0)

  User         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  RoleMaster   RoleMaster @relation(fields: [roleMasterId], references: [id], onDelete: Cascade)
  roleMasterId Int

  @@unique([userId, roleMasterId], name: "userId_roleMasterId_unique")
}

model ChainMethodLock {
  id        Int       @id @default(autoincrement())
  isLocked  Boolean   @default(false)
  expiresAt DateTime?
  updatedAt DateTime  @updatedAt
}

model Calendar {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now()) @updatedAt()
  sortOrder Float     @default(0)

  date DateTime @unique

  holidayType String @default("出勤")
}
