// 健康管理アプリ用のPrismaスキーマ

// 薬マスタ
model Medicine {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now()) @updatedAt()
  sortOrder Float     @default(0)

  name        String  @unique // 薬名
  requireUnit Boolean @default(false) // 単位入力が必要かどうか
  active      Boolean @default(true) // 有効/無効

  // リレーション
  HealthRecord HealthRecord[]
}

// 健康記録
model HealthRecord {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now()) @updatedAt()
  sortOrder Float     @default(0)

  // 関連ユーザー
  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  // 記録日時
  recordDate DateTime // 記録対象の日付
  recordTime String // 時刻（HH:mm形式）

  // カテゴリ
  category String // "blood_sugar", "urine", "stool", "meal", "snack", "medicine", "walking"

  // 血糖値データ
  bloodSugarValue Int? // 血糖値（数値のみ）

  // 薬データ
  Medicine     Medicine? @relation(fields: [medicineId], references: [id])
  medicineId   Int?
  medicineUnit Float? // 薬の単位（数値）

  // 歩行データ
  walkingShortDistance  Float? @default(0) // 短距離
  walkingMediumDistance Float? @default(0) // 中距離
  walkingLongDistance   Float? @default(0) // 長距離
  walkingExercise       Float? @default(0) // 運動

  // その他のデータ（尿、便、食事、間食は時刻のみなので追加のフィールドは不要）

  // メモ（任意）
  memo String?

  @@index([userId, recordDate])
  @@index([userId, category])
}

// 日誌（1日分）
model HealthJournal {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now()) @updatedAt()
  sortOrder Float     @default(0)

  // 関連ユーザー
  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  // 日誌の日付（7:00起点）
  journalDate DateTime // 記録対象の日付（7:00起点）

  // 目標と振り返り
  goalAndReflection String? // 自由記述欄

  // テンプレート適用済みフラグ
  templateApplied Boolean @default(false)

  // リレーション
  HealthJournalEntry HealthJournalEntry[]

  @@unique([userId, journalDate])
  @@index([userId, journalDate])
}

// 日誌エントリ（時間帯ごと）
model HealthJournalEntry {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now()) @updatedAt()
  sortOrder Float     @default(0)

  // 関連日誌
  healthJournalId Int
  HealthJournal   HealthJournal @relation(fields: [healthJournalId], references: [id], onDelete: Cascade)

  // 時間帯（7, 8, 9, ..., 6）
  hourSlot Int // 7:00-8:00なら7、8:00-9:00なら8

  // 自由記述コメント
  comment String?

  // リレーション
  HealthJournalImage HealthJournalImage[]

  @@unique([healthJournalId, hourSlot])
  @@index([healthJournalId, hourSlot])
}

// 日誌画像
model HealthJournalImage {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now()) @updatedAt()
  sortOrder Float     @default(0)

  // 関連エントリ
  HealthJournalEntry   HealthJournalEntry @relation(fields: [healthJournalEntryId], references: [id], onDelete: Cascade)
  healthJournalEntryId Int

  // 画像情報
  fileName    String // ファイル名
  filePath    String // ファイルパス
  fileSize    Int? // ファイルサイズ（バイト）
  mimeType    String? // MIMEタイプ
  description String? // 画像の説明

  @@index([healthJournalEntryId])
}

// タスク管理アプリ用スキーマ
model Task {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 基本情報
  title       String
  description String?
  dueDate     DateTime?
  completed   Boolean   @default(false)
  completedAt DateTime?

  // 定期タスク関連
  isRecurring         Boolean           @default(false)
  RecurringPattern    RecurringPattern?
  recurringEndDate    DateTime?
  recurringWeekdays   Int[] // 曜日指定用 (0=日曜, 1=月曜, ...)
  recurringDayOfMonth Int? // 月の日付指定用
  recurringMonths     Int[] // 月指定用 (1=1月, 2=2月, ...)

  // ユーザー情報
  userId Int?

  // ファイル添付
  TaskAttachment TaskAttachment[]

  // 定期タスクのマスター参照
  RecurringTask   RecurringTask? @relation(fields: [recurringTaskId], references: [id], onDelete: Cascade)
  recurringTaskId Int?

  @@index([userId, dueDate])
  @@index([completed, dueDate])
  @@index([recurringTaskId])
}

model TaskAttachment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String // S3 URL or local path

  Task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId Int
}

model RecurringTask {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 基本情報
  title       String
  description String?

  // 定期設定
  pattern    RecurringPattern
  startDate  DateTime
  endDate    DateTime // 必須フィールドに変更
  weekdays   Int[] // 曜日指定用 (0=日曜, 1=月曜, ...)
  dayOfMonth Int? // 月の日付指定用
  months     Int[] // 月指定用 (1=1月, 2=2月, ...)
  interval   Int              @default(1) // 間隔（毎週、隔週など）

  // 次回生成日時
  nextGenerationDate DateTime?

  // 生成停止フラグ
  isActive Boolean @default(true)

  // ユーザー情報
  userId Int?

  // 生成されたタスク
  Task Task[]

  @@index([userId, isActive])
  @@index([nextGenerationDate, isActive])
}

enum RecurringPattern {
  WEEKLY // 毎週
  MONTHLY // 毎月
  YEARLY // 毎年
  BIWEEKLY // 隔週
  QUARTERLY // 四半期
  CUSTOM // カスタム間隔
  DAILY // 毎日
  WEEKDAYS // 平日のみ
  WEEKENDS // 週末のみ
}
